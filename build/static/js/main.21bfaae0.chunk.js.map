{"version":3,"sources":["requests/Requests.js","logo2.svg","Search/Search.js","Disease/Disease.js","Virus/Virus.js","App.js","reportWebVitals.js","index.js"],"names":["fetchSearchResultsDisease","userEntry","onResultsFound","a","myFetcher","SparqlEndpointFetcher","fetchBindings","on","bindings","console","log","fetchSearchResultsVirus","Search","fetchData","state","diseaseChecked","virusChecked","query","handleResults","result","type","tmpSearchResults","searchResults","push","setState","handleInputChange","event","search","value","key","searching","handleCheckboxDisease","checked","handleCheckboxVirus","handleTitleClick","handleOptionClick","showOptions","resultsToPrint","this","sort","b","nameEn","map","comment","name","nameFr","commentFr","commentEn","className","length","substring","href","Fragment","onClick","src","logo","alt","id","placeholder","ref","input","onKeyDown","class","defaultChecked","onChange","htmlFor","React","Component","Disease","props","diseaseName","match","params","Virus","virusName","App","path","component","exact","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21bfaae0.chunk.js","sourcesContent":["import { SparqlEndpointFetcher } from \"fetch-sparql-endpoint\";\n\n// export async function fetchSearchResultsDiseaseAndVirus(\n//   userEntry,\n//   onResultsFound\n// ) {\n//   try {\n//     const myFetcher = new SparqlEndpointFetcher();\n//     const bindingsStream = await myFetcher.fetchBindings(\n//       \"https://dbpedia.org/sparql\",\n//       `\n//         SELECT ?s as ?search ?nameFr ?nameEn ?commentFr ?commentEn ?image\n//         WHERE {\n//             { {?s a yago:Virus101328702.}\n//             UNION\n//             {?s a dbo:Disease.} }\n//             FILTER regex(?s, \"` +\n//         userEntry +\n//         `\", \"i\").\n//             OPTIONAL {\n//                 ?s rdfs:label ?nameFr.\n//                 FILTER(langMatches(lang(?nameFr), \"fr\")).\n//             }\n//             OPTIONAL {\n//                 ?s rdfs:label ?nameEn.\n//                 FILTER(langMatches(lang(?nameEn), \"en\")).\n//             }\n//             OPTIONAL {\n//                 ?s rdfs:comment ?commentFr.\n//                 FILTER(langMatches(lang(?commentFr), \"fr\")).\n//             }\n//             OPTIONAL {\n//                 ?s rdfs:comment ?commentEn.\n//                 FILTER(langMatches(lang(?commentEn), \"en\")).\n//             }\n//             ?s foaf:depiction ?image.\n//         } LIMIT 10`\n//     );\n//     bindingsStream.on(\"data\", (bindings) => {\n//       onResultsFound(bindings,\"both\");\n//     });\n//   } catch (err) {\n//     console.log(\"somethin went wrong\", err);\n//   }\n// }\n\nexport async function fetchSearchResultsDisease(userEntry, onResultsFound) {\n  try {\n    const myFetcher = new SparqlEndpointFetcher();\n    const bindingsStream = await myFetcher.fetchBindings(\n      \"https://dbpedia.org/sparql\",\n      `\n        SELECT ?s as ?search ?nameFr ?nameEn ?commentFr ?commentEn ?image\n        WHERE {\n            ?s a yago:Disease114070360;\n            foaf:depiction ?image\n            FILTER regex(?s, \"` +\n        userEntry +\n        `\", \"i\").\n            OPTIONAL {\n                ?s rdfs:label ?nameFr.\n                FILTER(langMatches(lang(?nameFr), \"fr\")).\n            }\n            OPTIONAL {\n                ?s rdfs:label ?nameEn.\n                FILTER(langMatches(lang(?nameEn), \"en\")).\n            }\n            OPTIONAL {\n                ?s rdfs:comment ?commentFr.\n                FILTER(langMatches(lang(?commentFr), \"fr\")).\n            }\n            OPTIONAL {\n                ?s rdfs:comment ?commentEn.\n                FILTER(langMatches(lang(?commentEn), \"en\")).\n            }\n        } LIMIT 10 `\n    );\n    bindingsStream.on(\"data\", (bindings) => {\n      onResultsFound(bindings,\"disease\");\n    });\n  } catch (err) {\n    console.log(\"somethin went wrong\", err);\n  }\n}\n\nexport async function fetchSearchResultsVirus(userEntry, onResultsFound) {\n  try {\n    const myFetcher = new SparqlEndpointFetcher();\n    const bindingsStream = await myFetcher.fetchBindings(\n      \"https://dbpedia.org/sparql\",\n      `\n        SELECT ?s as ?search ?nameFr ?nameEn ?commentFr ?commentEn ?image\n        WHERE {\n            ?s a yago:Virus101328702;\n            foaf:depiction ?image.\n            FILTER regex(?s, \"` +\n        userEntry +\n        `\", \"i\").\n            OPTIONAL {\n                ?s rdfs:label ?nameFr.\n                FILTER(langMatches(lang(?nameFr), \"fr\")).\n            }\n            OPTIONAL {\n                ?s rdfs:label ?nameEn.\n                FILTER(langMatches(lang(?nameEn), \"en\")).\n            }\n            OPTIONAL {\n                ?s rdfs:comment ?commentFr.\n                FILTER(langMatches(lang(?commentFr), \"fr\")).\n            }\n            OPTIONAL {\n                ?s rdfs:comment ?commentEn.\n                FILTER(langMatches(lang(?commentEn), \"en\")).\n            }\n        } LIMIT 10`\n    );\n    bindingsStream.on(\"data\", (bindings) => {\n      onResultsFound(bindings,\"virus\");\n    });\n  } catch (err) {\n    console.log(\"somethin went wrong\", err);\n  }\n}\n\n\n","export default __webpack_public_path__ + \"static/media/logo2.103b5fa1.svg\";","import React from \"react\";\nimport { fetchSearchResultsDisease } from \"../requests/Requests\";\nimport { fetchSearchResultsVirus } from \"../requests/Requests\";\nimport \"./Search.css\";\nimport logo from \"../logo2.svg\";\n\nclass Search extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      searchResults: [], // an array where the results found are added\n      query: \"\", // the text typed into the search input\n      searching: false, // defines if the \"Rechercher\" button has been pressed once\n      diseaseChecked: true, //define if the checkbox disease is checked or not\n      virusChecked: true, //define if the checkbox virus is checked or not\n      showOptions: false, // define if you can see the search options\n    };\n  }\n\n  fetchData = () => {\n    if (this.state.diseaseChecked && this.state.virusChecked) {\n      fetchSearchResultsDisease(this.state.query, this.handleResults);\n      fetchSearchResultsVirus(this.state.query, this.handleResults);\n    } else if (this.state.diseaseChecked) {\n      fetchSearchResultsDisease(this.state.query, this.handleResults);\n    } else if (this.state.virusChecked) {\n      fetchSearchResultsVirus(this.state.query, this.handleResults);\n    }\n  };\n\n  handleResults = (result, type) => {\n    result.type = type;\n    let tmpSearchResults = this.state.searchResults;\n    tmpSearchResults.push(result);\n    this.setState({ searchResults: tmpSearchResults });\n  };\n\n  handleInputChange = (event) => {\n    this.setState({ query: this.search.value });\n    if (event.key === \"Enter\") {\n      this.fetchData();\n      this.setState({ searching: true, searchResults: [] });\n    }\n  };\n\n  handleCheckboxDisease = () => {\n    let checked = !this.state.diseaseChecked;\n    this.setState({ diseaseChecked: checked });\n  };\n\n  handleCheckboxVirus = () => {\n    let checked = !this.state.virusChecked;\n    this.setState({ virusChecked: checked });\n  };\n\n  handleTitleClick = () => {\n    this.setState({ searching: false });\n  };\n\n  handleOptionClick = () => {\n    this.setState({ showOptions: !this.state.showOptions });\n    console.log(this.state.showOptions);\n  };\n\n  render() {\n    let resultsToPrint;\n    if (this.state.searchResults) {\n      let searchResultsFiltered = this.state.searchResults.sort((a, b) => {\n        if (a.type === \"virus\") {\n          if (b.type === \"virus\") {\n            if (a.nameEn.value < b.nameEn.value) {\n              return -1;\n            } else {\n              return 1;\n            }\n          } else {\n            return -1;\n          }\n        }\n        if (a.type === \"disease\") {\n          if (b.type === \"disease\") {\n            if (a.nameEn.value < b.nameEn.value) {\n              return -1;\n            } else {\n              return 1;\n            }\n          } else {\n            return 1;\n          }\n        }\n        return 0;\n      });\n      resultsToPrint = searchResultsFiltered.map((result) => {\n        let name = result.nameFr ? result.nameFr.value : result.nameEn.value;\n        let comment;\n        if (result.commentFr) {\n          comment = result.commentFr.value;\n        } else if (result.commentEn) {\n          comment = result.commentEn.value;\n        }\n        let subStringSize = 200;\n        if (name)\n          return (\n            <li className={result.type}>\n              <h2>{result.type === \"virus\" ? \"V\" : \"D\"}</h2>\n              <h3>{name}</h3>\n              <p>\n                {comment.length >= subStringSize\n                  ? comment.substring(0, subStringSize) + \"...\"\n                  : comment}\n              </p>\n              <a href={\"/\" + result.type + \"/\" + name}>\n                <button>En savoir plus</button>\n              </a>\n            </li>\n          );\n      });\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"searcher-container\">\n          <div\n            className={\n              this.state.searching ? \"search-header topbar\" : \"search-header\"\n            }\n          >\n            <img\n              onClick={this.handleTitleClick}\n              src={logo}\n              className=\"search-logo\"\n              alt=\"logo\"\n            />\n            <div\n              className={\n                this.state.searching\n                  ? \"search-text-container topbar\"\n                  : \"search-text-container\"\n              }\n              onClick={this.handleTitleClick}\n            >\n              <h2 className=\"search-title\">\n                The <br />\n                Disease\n                <br /> Searcher\n              </h2>\n              <p>By the HexaOne Team</p>\n            </div>\n\n            <div\n              className={\n                this.state.searching\n                  ? \"autocomplete home-search-bar topbar\"\n                  : \"autocomplete home-search-bar\"\n              }\n            >\n              <input\n                className=\"home-search\"\n                type=\"text\"\n                name=\"search\"\n                id=\"search\"\n                placeholder=\"Rechercher une maladie. ex: coronavirus\"\n                ref={(input) => (this.search = input)}\n                onKeyDown={this.handleInputChange}\n              />\n              <div className=\"search-options\" onClick={this.handleOptionClick}>\n                <span class=\"material-icons blue\">tune</span>\n              </div>\n            </div>\n            <div\n              id={\n                this.state.showOptions ? \"search-options-container\" : \"hidden\"\n              }\n            >\n              <label className=\"switch\">\n                <input\n                  type=\"checkbox\"\n                  id=\"disease\"\n                  defaultChecked={this.state.diseaseChecked}\n                  onChange={this.handleCheckboxDisease}\n                />\n                <span className=\"slider round blue\" />\n                <label className=\"label\" htmlFor=\"disease\">\n                  Disease\n                </label>\n              </label>\n              <label className=\"switch\">\n                <input\n                  type=\"checkbox\"\n                  id=\"virus\"\n                  defaultChecked={this.state.virusChecked}\n                  onChange={this.handleCheckboxVirus}\n                />\n                <span className=\"slider round green\" />\n                <label className=\"label\" htmlFor=\"virus\">\n                  Virus\n                </label>\n              </label>\n            </div>\n          </div>\n        </div>\n        <div className=\"results-container\">\n          {this.state.searching && this.state.searchResults.length === 0 ? (\n            <h2>Pas de résultats</h2>\n          ) : (\n            <React.Fragment />\n          )}\n          <ul className=\"tilesWrap\">{resultsToPrint}</ul>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Search;\n","import React,{Component} from 'react';\n\nclass Disease extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            diseaseName : this.props.match.params.diseaseName,\n        }\n    }\n\n    render(){\n        return(\n            <h1>{this.state.diseaseName}</h1>\n        );\n    }\n}\n\nexport default Disease;","import React from \"react\";\n\nclass Virus extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tvirusName: this.props.match.params.virusName,\n\t\t};\n\t}\n\n\tcomponentDidMount() {}\n\n\trender() {\n\t\treturn <h1>{this.state.virusName}</h1>;\n\t}\n}\n\nexport default Virus;\n","import React, { Component } from \"react\";\nimport {\n\tBrowserRouter as Router,\n\tRoute,\n\tRedirect,\n\tSwitch,\n} from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Search from \"./Search/Search\";\nimport Disease from \"./Disease/Disease\";\nimport Virus from \"./Virus/Virus\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t{/* Front Pages */}\n\t\t\t\t\t<Route path=\"/\" component={Search} exact />\n\t\t\t\t\t<Route path=\"/virus/:virusName\" component={Virus} exact />\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/disease/:diseaseName\"\n\t\t\t\t\t\tcomponent={Disease}\n\t\t\t\t\t\texact\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Redirect to=\"/\" />\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}